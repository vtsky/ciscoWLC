%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - ec
scope: source.example-c

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: strings
    - include: mac_addresses
    - include: numbers
    - include: co_client
    - include: fsm_state
    - include: ssid
    - include: eap_keys

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(wncd_x_R0-0|RADIUS|Access-Request|EAP|EAPOL|association|FAILURE|WLAN|Re-Association)\b'
      scope: keyword.control.example-c

  co_client:
    - match: !ruby/regexp 'CO_CLIENT.+?(?=,)'
      scope: constant.numeric.example-c
  mac_addresses:
    - match: !ruby/regexp '^.([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\.[0-9a-fA-F]{4}\.[0-9a-fA-F]{4})'
      scope: keyword.control.example-c

  fsm_state:
    - match: !ruby/regexp 'S_.+?(?= )|S_.+?(?=\n)'
      scope: keyword.control.example-c
  ssid:
    - match: !ruby/regexp 'SSID.+?(?=,)|SSID+?(?=\n)'
      scope: keyword.control.example-c
  eap_keys:
    - match: !ruby/regexp 'M[1-4]'
      scope: constant.numeric.example-c
  numbers:
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.example-c

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.example-c
    - match: '\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '//'
      scope: punctuation.definition.comment.example-c
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.example-c
        - match: $\n?
          pop: true
